@model WebProgramlamaProje.Models.Randevu

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Randevu</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="RandevuAl">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="IslemId" class="control-label"></label>
                <select asp-for="IslemId" class="form-control" asp-items="ViewBag.IslemId" id="IslemId"></select>
            </div>
            <div class="form-group">
                <label asp-for="CalisanId" class="control-label"></label>
                <select asp-for="CalisanId" class="form-control" asp-items="ViewBag.CalisanId" id="CalisanId" onchange="getCalisanUygunluk(this.value)"></select>
            </div>
            <div class="form-group">
                <label asp-for="SalonId" class="control-label"></label>
                <select asp-for="SalonId" class="form-control" asp-items="ViewBag.SalonId"></select>
            </div>
            <input type="hidden" asp-for="KullaniciId" value="@ViewData["KullaniciId"]" />
            <div class="form-group">
                <label asp-for="Tarih" class="control-label"></label>
                <input asp-for="Tarih" class="form-control" type="date" />
                <span asp-validation-for="Tarih" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Saat" class="control-label"></label>
                <input asp-for="Saat" class="form-control" type="time" />
                <span asp-validation-for="Saat" class="text-danger"></span>
            </div>
            <br />
            <br />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div id="calisanUygunluk"></div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.getElementById("IslemId").addEventListener("change", function () {
            var islemId = this.value;
            fetch('/Randevus/GetCalisanlarByIslem?islemId=' + islemId)
                .then(response => response.json())
                .then(data => {
                    var calisanSelect = document.getElementById("CalisanId");
                    calisanSelect.innerHTML = '';
                    data.forEach(function (calisan) {
                        var option = document.createElement("option");
                        option.value = calisan.calisanId;
                        option.text = calisan.ad;
                        calisanSelect.appendChild(option);
                    });
                });
        });

        async function getCalisanUygunluk(calisanId) {
            try {
                const response = await fetch(`/api/randevus/calisan/${calisanId}/uygunluk`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const uygunluklar = await response.json();
                const uygunlukDiv = document.getElementById('calisanUygunluk');
                uygunlukDiv.innerHTML = '';

                uygunluklar.forEach(uygunluk => {
                    const uygunlukItem = document.createElement('div');
                    uygunlukItem.innerHTML = `
                        <p>Gün: ${uygunluk.Gun}</p>
                        <p>Başlangıç: ${uygunluk.Baslangic}</p>
                        <p>Bitiş: ${uygunluk.Bitis}</p>
                        <hr>
                    `;
                    uygunlukDiv.appendChild(uygunlukItem);
                });
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/site.css" />
}
